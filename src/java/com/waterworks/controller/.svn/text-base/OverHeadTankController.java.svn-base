package com.waterworks.controller;

import com.connection.DBConnection.DBConnection;
import com.util.UniqueIDGenerator;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.waterworks.model.OverHeadTankModel;
import com.waterworks.tableClasses.OverHeadTank;
import org.json.simple.JSONObject;

public class OverHeadTankController extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        int lowerLimit, noOfRowsTraversed, noOfRowsToDisplay = 3, noOfRowsInTable;
        System.out.println("this is OverHeadTankController ....");
        ServletContext ctx = getServletContext();

        OverHeadTankModel overHeadTankModel = new OverHeadTankModel();

        overHeadTankModel.setDriver(ctx.getInitParameter("driverClass"));
        overHeadTankModel.setUrl(ctx.getInitParameter("connectionString"));
        overHeadTankModel.setUser(ctx.getInitParameter("db_username"));
        overHeadTankModel.setPassword(ctx.getInitParameter("db_password"));
        try {
            overHeadTankModel.setConnection(DBConnection.getConnectionForUtf(ctx));
        } catch (SQLException ex) {
            Logger.getLogger(OverHeadTankController.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Connection is - " + overHeadTankModel.getConnection());
        request.setCharacterEncoding("UTF-8");
        response.setHeader("Content-Type", "text/plain; charset=UTF-8");

        String task = request.getParameter("task");
        String searchWaterTreatmentPlant = "";
        String searchOverHeadTank = "";
        searchWaterTreatmentPlant = request.getParameter("searchWaterTreatmentPlant");
        searchOverHeadTank = request.getParameter("searchOverHeadTank");

        try {
            if (searchWaterTreatmentPlant == null) {
                searchWaterTreatmentPlant = "";
            }
            if (searchOverHeadTank == null) {
                searchOverHeadTank = "";
            }
        } catch (Exception e) {
        }

        try {
            //----- This is only for Vendor key Person JQuery
            String JQstring = request.getParameter("action1");
            String q = request.getParameter("q");   // field own input
            if (JQstring != null) {
                PrintWriter out = response.getWriter();
                List<String> list = null;
                if (JQstring.equals("getWaterTreatmentPlant")) {
                    list = overHeadTankModel.getWaterTreatmentPlant(q);
                } else if (JQstring.equals("getOverHeadTank")) {
                    searchWaterTreatmentPlant = request.getParameter("waterTreatmentPlant");
                    list = overHeadTankModel.getOverHeadTank(q, searchWaterTreatmentPlant);
                } else if (JQstring.equals("getCityName")) {
                    list = overHeadTankModel.getCityName(q);
                }
                Iterator<String> iter = list.iterator();
                while (iter.hasNext()) {
                    String data = iter.next();
                    out.println(data);
                }
                overHeadTankModel.closeConnection();
                return;
            }
        } catch (Exception e) {
            System.out.println("\n Error --OverHeadTankController get JQuery Parameters Part-" + e);
        }

        if (task == null) {
            task = "";
        } else if (task.equals("Show All Records")) {
            searchWaterTreatmentPlant = "";
            searchOverHeadTank = "";
        } else if (task.equals("generateReport")) {
            searchOverHeadTank = request.getParameter("searchOverHeadTank");
            searchWaterTreatmentPlant = request.getParameter("searchWaterTreatmentPlant");
            List listAll = null;
            String jrxmlFilePath;
            response.setContentType("application/pdf");
            ServletOutputStream servletOutputStream = response.getOutputStream();
            listAll = overHeadTankModel.showAllData(searchWaterTreatmentPlant, searchOverHeadTank);
            jrxmlFilePath = ctx.getRealPath("/report/waterWorks/OverHeadTankReport.jrxml");
            byte[] reportInbytes = overHeadTankModel.generateMapReport(jrxmlFilePath, listAll);
            response.setContentLength(reportInbytes.length);
            servletOutputStream.write(reportInbytes, 0, reportInbytes.length);
            servletOutputStream.flush();
            servletOutputStream.close();
            return;
        }

        if (task.equals("showMapWindow")) {
            String longi = request.getParameter("logitude");
            String latti = request.getParameter("lattitude");
            request.setAttribute("longi", longi);
            request.setAttribute("latti", latti);
            System.out.println(latti + "," + longi);
            request.getRequestDispatcher("openMapWindowView").forward(request, response);
            return;
        }
        if (task.equals("showAllOverheadTank")) {
            List<OverHeadTank> List = overHeadTankModel.showDataBean();
            request.setAttribute("CoordinatesList", List);
            request.getRequestDispatcher("/view/MapView/allMapWindow.jsp").forward(request, response);
            return;
        }
        if (task.equals("showAllView")) {
            List<OverHeadTank> List = overHeadTankModel.showDataBean();
            request.setAttribute("TankList", List);
            List<OverHeadTank> List1 = overHeadTankModel.showDataBean1();
            request.setAttribute("CoordinatesList", List1);
            
            request.getRequestDispatcher("/view/MapView/OverheadWatertreatment.jsp").forward(request, response);
            return;
        }
        //////////////////////////////////////////
        if(task.equals("getAllLatLng")){
            try{
           JSONObject json = overHeadTankModel.getAllLetLng();
                PrintWriter out = response.getWriter();
                out.print(json);
            }catch(Exception e){
             System.out.println("Ajax Call Error "+e);
            }
                return;

        }

        if (task.equals("Delete")) {
            overHeadTankModel.deleteRecord(Integer.parseInt(request.getParameter("overHeadTankId")));  // Pretty sure that organisation_type_id will be available.
        } else if (task.equals("Save") || task.equals("Save AS New") || task.equals("Update")) {
            int overHeadTankId;
            try {
                overHeadTankId = Integer.parseInt(request.getParameter("overHeadTankId"));
            } catch (Exception e) {
                overHeadTankId = 0;
            }
            if (task.equals("Save AS New")) {
                overHeadTankId = 0;
            }
            OverHeadTank overHeadTankBean = new OverHeadTank();
            try {
                overHeadTankBean.setOverHeadTankId(overHeadTankId);
                overHeadTankBean.setWaterTreatmentPlantId(overHeadTankModel.getWaterTreatmentPlantId(request.getParameter("waterTreatmentPlantName")));
                overHeadTankBean.setOverHeadTankName(request.getParameter("overHeadTankName"));
                overHeadTankBean.setCapacityHeight(Float.parseFloat(request.getParameter("capacityHeight")));
                overHeadTankBean.setCapacityLTR(Integer.parseInt(request.getParameter("capacityLTR")));
                overHeadTankBean.setHeight(Float.parseFloat(request.getParameter("height")));
                overHeadTankBean.setCityId(overHeadTankModel.getCityId(request.getParameter("cityName")));
                overHeadTankBean.setAddress1(request.getParameter("address1"));
                overHeadTankBean.setAddress2(request.getParameter("address2"));
                overHeadTankBean.setLatitude(request.getParameter("latitude"));
                overHeadTankBean.setLongitude(request.getParameter("longitude"));
                overHeadTankBean.setRemark(request.getParameter("remark"));
            } catch (Exception e) {
                System.out.println("Error in OverHeadTankController : " + e);
            }
            if (overHeadTankId == 0) {
                System.out.println("Inserting values by OverHeadTankModel......");
                overHeadTankModel.insertRecord(overHeadTankBean);
            } else {
                System.out.println("Update values by OverHeadTankModel........");
                overHeadTankModel.updateRecord(overHeadTankBean);
            }
        }
        //    if (request.getAttribute("isSelectPriv").equals("Y")) {
        try {
            lowerLimit = Integer.parseInt(request.getParameter("lowerLimit"));
            noOfRowsTraversed = Integer.parseInt(request.getParameter("noOfRowsTraversed"));
        } catch (Exception e) {
            lowerLimit = noOfRowsTraversed = 0;
        }
        String buttonAction = request.getParameter("buttonAction"); // Holds the name of any of the four buttons: First, Previous, Next, Delete.
        if (buttonAction == null) {
            buttonAction = "none";
        }
        System.out.println("searching.......... " + searchOverHeadTank);
        noOfRowsInTable = overHeadTankModel.getTotalRowsInTable(searchWaterTreatmentPlant, searchOverHeadTank);                  // get the number of records (rows) in the table.

        if (buttonAction.equals("Next")); // lowerLimit already has value such that it shows forward records, so do nothing here.
        else if (buttonAction.equals("Previous")) {
            int temp = lowerLimit - noOfRowsToDisplay - noOfRowsTraversed;
            if (temp < 0) {
                noOfRowsToDisplay = lowerLimit - noOfRowsTraversed;
                lowerLimit = 0;
            } else {
                lowerLimit = temp;
            }
        } else if (buttonAction.equals("First")) {
            lowerLimit = 0;
        } else if (buttonAction.equals("Last")) {
            lowerLimit = noOfRowsInTable - noOfRowsToDisplay;
            if (lowerLimit < 0) {
                lowerLimit = 0;
            }
        }

        if (task.equals("Save") || task.equals("Delete") || task.equals("Save AS New") || task.equals("Update")) {
            lowerLimit = lowerLimit - noOfRowsTraversed;    // Here objective is to display the same view again, i.e. reset lowerLimit to its previous value.
        }
        // Logic to show data in the table.
        List<OverHeadTank> overHeadTankList = overHeadTankModel.getAllRecords(lowerLimit, noOfRowsToDisplay, searchWaterTreatmentPlant, searchOverHeadTank);
        lowerLimit = lowerLimit + overHeadTankList.size();
        noOfRowsTraversed = overHeadTankList.size();

        // Now set request scoped attributes, and then forward the request to view.
        request.setAttribute("lowerLimit", lowerLimit);
        request.setAttribute("noOfRowsTraversed", noOfRowsTraversed);
        request.setAttribute("overHeadTankList", overHeadTankList);

        if ((lowerLimit - noOfRowsTraversed) == 0) {     // if this is the only data in the table or when viewing the data 1st time.
            request.setAttribute("showFirst", "false");
            request.setAttribute("showPrevious", "false");
        }
        if (lowerLimit == noOfRowsInTable) {             // if No further data (rows) in the table.
            request.setAttribute("showNext", "false");
            request.setAttribute("showLast", "false");
        }
        // }
        request.setAttribute("IDGenerator", new UniqueIDGenerator());
        request.setAttribute("searchOverHeadTank", searchOverHeadTank);
        request.setAttribute("searchWaterTreatmentPlant", searchWaterTreatmentPlant);
        request.setAttribute("message", overHeadTankModel.getMessage());
        request.setAttribute("msgBgColor", overHeadTankModel.getMessageBGColor());
        request.getRequestDispatcher("overHeadTankView").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doGet(request, response);
    }
}
